import React, { useEffect, useState, useRef } from "react";
import { MapContainer, TileLayer, Polyline, Circle } from "react-leaflet";
import L from "leaflet";
import polyline from "@mapbox/polyline";
import "leaflet/dist/leaflet.css";

// Make map fill the viewport
document.head.insertAdjacentHTML(
  "beforeend",
  `<style>
     html, body { margin: 0; padding: 0; height: 100%; }
     #root { height: 100%; }
   </style>`
);

// Fix default marker icons
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: require("leaflet/dist/images/marker-icon-2x.png"),
  iconUrl: require("leaflet/dist/images/marker-icon.png"),
  shadowUrl: require("leaflet/dist/images/marker-shadow.png"),
});

// Strava OAuth
const CLIENT_ID = "167098";
const CLIENT_SECRET = "c7c9681e877fb1894bd63ddfc8c42e902755150c";
const REDIRECT_URI = "https://t8d2vp.csb.app";

// Color by activity type
const getColor = (type) => {
  switch (type) {
    case "Hike":
      return "#000000";
    case "Walk":
      return "#E64F51";
    case "Run":
      return "#328EB9";
    case "Ride":
      return "#FE9900";
    default:
      return "#EC8CDD";
  }
};

export default function App() {
  const [accessToken, setAccessToken] = useState(null);
  const [routes, setRoutes] = useState([]);
  const [menuOpen, setMenuOpen] = useState(false);
  const [squareActive, setSquareActive] = useState(false);
  const [filterOpen, setFilterOpen] = useState(false);
  const [selectedFilter, setSelectedFilter] = useState("All");
  const [showStats, setShowStats] = useState(false);
  const [userLoc, setUserLoc] = useState(null);
  const exchanged = useRef(false);
  const mapRef = useRef(null);

  const INITIAL_CENTER = [51.505, -0.09];
  const ZOOM_LEVEL = 12;
  const fontStack = "system-ui, sans-serif";
  const btnFont = 13;

  // Shared button style (30√ó30px)
  const btnStyle = {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    fontFamily: fontStack,
    fontSize: btnFont,
    fontWeight: "bold",
    background: "white",
    border: "1px solid #ccc",
    borderRadius: 8,
    color: "inherit",
    cursor: "pointer",
    textDecoration: "none",
    width: 30,
    height: 30,
    padding: 0,
  };

  const filterOptions = [
    { label: "ü•æ Hiking", type: "Hike" },
    { label: "üëü Walking", type: "Walk" },
    { label: "üèÉ Running", type: "Run" },
    { label: "üö¥ Cycling", type: "Ride" },
    { label: "üèÖ All Activities", type: "All" },
  ];

  // OAuth code exchange
  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const code = params.get("code");
    if (code && !exchanged.current) {
      exchanged.current = true;
      (async () => {
        try {
          const res = await fetch("https://www.strava.com/oauth/token", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              client_id: CLIENT_ID,
              client_secret: CLIENT_SECRET,
              code,
              grant_type: "authorization_code",
            }),
          });
          const data = await res.json();
          if (res.ok) setAccessToken(data.access_token);
          else alert("Login failed‚Äîsee console");
        } catch {
          alert("OAuth error‚Äîsee console");
        } finally {
          window.history.replaceState({}, "", window.location.pathname);
        }
      })();
    }
  }, []);

  // Fetch all pages of activities
  useEffect(() => {
    if (!accessToken) return;
    (async () => {
      let page = 1,
        all = [];
      while (true) {
        const res = await fetch(
          `https://www.strava.com/api/v3/athlete/activities?per_page=200&page=${page}`,
          { headers: { Authorization: `Bearer ${accessToken}` } }
        );
        const data = await res.json();
        if (!res.ok || data.length === 0) break;
        data.forEach((act) => {
          if (act.map?.summary_polyline) {
            const coords = polyline
              .decode(act.map.summary_polyline)
              .map(([lat, lng]) => [lat, lng]);
            all.push({
              coords,
              type:
                act.sport_type === "MountainBikeRide" ? "Ride" : act.sport_type,
            });
          }
        });
        page++;
      }
      setRoutes(all);
    })();
  }, [accessToken]);

  // --- Statistics view ---
  if (showStats) {
    return (
      <div
        style={{
          position: "relative",
          width: "100%",
          height: "100%",
          background: "#fff",
          fontFamily: fontStack,
        }}
      >
        {/* Title */}
        <div
          style={{
            position: "absolute",
            top: 20,
            left: 20,
            zIndex: 1000,
            ...btnStyle,
            width: "auto",
            padding: "0 10px",
          }}
        >
          Statistics
        </div>

        {/* Menu */}
        <div style={{ position: "absolute", top: 20, right: 20, zIndex: 1000 }}>
          <div onClick={() => setMenuOpen((o) => !o)} style={btnStyle}>
            <div style={{ display: "flex", flexDirection: "column", gap: 2 }}>
              <div style={{ width: 16, height: 2, background: "#000" }} />
              <div style={{ width: 16, height: 2, background: "#000" }} />
              <div style={{ width: 16, height: 2, background: "#000" }} />
            </div>
          </div>
          {menuOpen && (
            <div
              style={{
                position: "absolute",
                top: "100%",
                right: 0,
                marginTop: 6,
                background: "#fff",
                border: "1px solid #ccc",
                borderRadius: 8,
                boxShadow: "0 2px 8px rgba(0,0,0,0.15)",
                padding: 6,
                minWidth: 100,
              }}
            >
              <div
                onClick={() => {
                  setShowStats(false);
                  setMenuOpen(false);
                  mapRef.current?.setView(INITIAL_CENTER, ZOOM_LEVEL);
                }}
                style={{
                  padding: "4px 8px",
                  cursor: "pointer",
                  fontSize: btnFont,
                }}
              >
                Heatmap
              </div>
              <div
                onClick={() => setMenuOpen(false)}
                style={{
                  padding: "4px 8px",
                  cursor: "pointer",
                  fontSize: btnFont,
                }}
              >
                Statistics
              </div>
              <div
                onClick={() => {
                  setAccessToken(null);
                  setRoutes([]);
                  window.location.href = window.location.pathname;
                }}
                style={{
                  padding: "4px 8px",
                  cursor: "pointer",
                  fontSize: btnFont,
                }}
              >
                Logout
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }

  // --- Main map view ---
  return (
    <div
      style={{
        position: "relative",
        width: "100%",
        height: "100%",
        fontFamily: fontStack,
      }}
    >
      {/* Adjust zoom control placement */}
      <style>
        {`.leaflet-top.leaflet-left .leaflet-control-zoom { top: 70px !important; left: 20px !important; }`}
      </style>

      {/* Top-left bar: Traxplore + üìç */}
      <div
        style={{
          position: "absolute",
          top: 20,
          left: 20,
          zIndex: 1000,
          display: "flex",
          gap: 6,
          alignItems: "center",
        }}
      >
        <div style={{ ...btnStyle, width: "auto", padding: "0 10px" }}>
          Traxplore
        </div>
        <button
          onClick={() => {
            if (!navigator.geolocation) {
              return alert("Geolocation not supported");
            }
            navigator.geolocation.getCurrentPosition(
              ({ coords }) => {
                const latlng = [coords.latitude, coords.longitude];
                setUserLoc(latlng);
                mapRef.current?.setView(latlng, ZOOM_LEVEL);
              },
              () => alert("Unable to retrieve your location")
            );
          }}
          style={btnStyle}
        >
          üìç
        </button>
      </div>

      {/* The Leaflet map */}
      <MapContainer
        center={INITIAL_CENTER}
        zoom={ZOOM_LEVEL}
        style={{ width: "100%", height: "100%" }}
        whenCreated={(map) => (mapRef.current = map)}
      >
        <TileLayer
          url="https://api.maptiler.com/maps/basic-v2/{z}/{x}/{y}.png?key=lABo0Xq95K1kxNYiJGpi"
          attribution="¬© MapTiler ¬© OpenStreetMap contributors"
        />

        {/* your Strava polylines */}
        {routes
          .filter((r) => selectedFilter === "All" || r.type === selectedFilter)
          .map((r, i) => (
            <Polyline
              key={i}
              positions={r.coords}
              pathOptions={{ color: getColor(r.type), weight: 3, opacity: 0.8 }}
            />
          ))}

        {/* user location marker */}
        {userLoc && (
          <Circle
            center={userLoc}
            radius={30}
            pathOptions={{
              color: "#3388ff",
              fillColor: "#3388ff",
              fillOpacity: 0.4,
            }}
          />
        )}
      </MapContainer>

      {/* Top-right controls */}
      <div
        style={{
          position: "absolute",
          top: 20,
          right: 20,
          zIndex: 1000,
          display: "flex",
          gap: 6,
          alignItems: "center",
        }}
      >
        {!accessToken ? (
          <a
            href={`https://www.strava.com/oauth/authorize?client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(
              REDIRECT_URI
            )}&response_type=code&scope=activity:read_all`}
            style={{
              ...btnStyle,
              width: "auto",
              padding: "0 10px",
              textDecoration: "none",
            }}
          >
            Connect with Strava
          </a>
        ) : (
          <>
            {/* Square toggle */}
            <div onClick={() => setSquareActive((sa) => !sa)} style={btnStyle}>
              <div
                style={{
                  width: 16,
                  height: 16,
                  borderRadius: 4,
                  background: squareActive ? "#FE9900" : "transparent",
                  border: `2px solid #FE9900`,
                }}
              />
            </div>

            {/* Filter (‚ö°) */}
            <div style={{ position: "relative" }}>
              <div onClick={() => setFilterOpen((o) => !o)} style={btnStyle}>
                <span style={{ fontSize: 18 }}>‚ö°</span>
              </div>
              {filterOpen && (
                <div
                  style={{
                    position: "absolute",
                    top: "100%",
                    right: 0,
                    marginTop: 6,
                    background: "#fff",
                    border: "1px solid #ccc",
                    borderRadius: 8,
                    boxShadow: "0 2px 8px rgba(0,0,0,0.15)",
                    padding: 6,
                  }}
                >
                  {filterOptions.map((opt) => (
                    <div
                      key={opt.type}
                      onClick={() => {
                        setSelectedFilter(opt.type);
                        setFilterOpen(false);
                      }}
                      style={{
                        display: "flex",
                        alignItems: "center",
                        gap: 8,
                        padding: "4px 8px",
                        cursor: "pointer",
                        fontSize: btnFont,
                        background:
                          selectedFilter === opt.type
                            ? getColor(opt.type)
                            : "transparent",
                        color: selectedFilter === opt.type ? "#fff" : "#000",
                        borderRadius: 4,
                        minWidth: 140,
                      }}
                    >
                      {opt.label}
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* Menu (‚ò∞) */}
            <div onClick={() => setMenuOpen((o) => !o)} style={btnStyle}>
              <div style={{ display: "flex", flexDirection: "column", gap: 2 }}>
                <div style={{ width: 16, height: 2, background: "#000" }} />
                <div style={{ width: 16, height: 2, background: "#000" }} />
                <div style={{ width: 16, height: 2, background: "#000" }} />
              </div>
            </div>
            {menuOpen && (
              <div
                style={{
                  position: "absolute",
                  top: "100%",
                  right: 0,
                  marginTop: 6,
                  background: "#fff",
                  border: "1px solid #ccc",
                  borderRadius: 8,
                  boxShadow: "0 2px 8px rgba(0,0,0,0.15)",
                  padding: 6,
                }}
              >
                <div
                  onClick={() => {
                    setShowStats(true);
                    setMenuOpen(false);
                  }}
                  style={{
                    padding: "4px 8px",
                    cursor: "pointer",
                    fontSize: btnFont,
                  }}
                >
                  Statistics
                </div>
                <div
                  onClick={() => {
                    setAccessToken(null);
                    setRoutes([]);
                    window.location.href = window.location.pathname;
                  }}
                  style={{
                    padding: "4px 8px",
                    cursor: "pointer",
                    fontSize: btnFont,
                  }}
                >
                  Logout
                </div>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
}
